name: PR Security Scan

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'finsec-api/finsec_api/**'
      - 'finsec-api/app/**'
      - 'finsec-api/finsec_api/requirements.txt'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper diff analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          
      - name: Check for modified Python files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.py$' | tr '\n' ' ' || echo "")
          echo "Changed Python files: $CHANGED_FILES"
          echo "python_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: Run Bandit on changed files
        if: steps.changed-files.outputs.python_files != ''
        run: |
          bandit -r ${{ steps.changed-files.outputs.python_files }} -f json -o bandit-results.json || echo "Bandit found issues"
      
      - name: Run Bandit on backend code
        run: |
          bandit -r finsec-api/finsec_api -r finsec-api/app -ll -f json -o bandit-full-results.json || echo "Bandit found issues"
      
      - name: Run Safety dependency check
        run: |
          safety check -r finsec-api/finsec_api/requirements.txt --json > safety-results.json || echo "Safety found issues"
        
      - name: Run Semgrep
        run: |
          semgrep --config=p/python --config=p/security-audit finsec-api/finsec_api finsec-api/app --json > semgrep-results.json || echo "Semgrep found issues"
      
      - name: Generate PR comment
        id: generate-comment
        run: |
          echo "Generating security report for PR #${{ github.event.pull_request.number }}"
          
          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "## 🔒 Security Scan Results" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # Process Bandit results
          if [ -f bandit-results.json ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-results.json)
            BANDIT_HIGH=$(jq '.results[] | select(.issue_severity=="HIGH") | .issue_severity' bandit-results.json | wc -l)
            BANDIT_MED=$(jq '.results[] | select(.issue_severity=="MEDIUM") | .issue_severity' bandit-results.json | wc -l)
            BANDIT_LOW=$(jq '.results[] | select(.issue_severity=="LOW") | .issue_severity' bandit-results.json | wc -l)
            
            echo "### Bandit (Changed Files)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "| Severity | Count |" >> $GITHUB_ENV
            echo "| --- | --- |" >> $GITHUB_ENV
            echo "| 🔴 HIGH | $BANDIT_HIGH |" >> $GITHUB_ENV
            echo "| 🟠 MEDIUM | $BANDIT_MED |" >> $GITHUB_ENV
            echo "| 🟡 LOW | $BANDIT_LOW |" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            if [ "$BANDIT_HIGH" -gt 0 ]; then
              echo "#### 🔴 High Severity Issues" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              jq -r '.results[] | select(.issue_severity=="HIGH") | "- **\(.issue_text)** in `\(.filename)` line \(.line_number)"' bandit-results.json >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          fi
          
          # Process Safety results
          if [ -f safety-results.json ]; then
            SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-results.json)
            
            echo "### Safety (Dependency Check)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "Found $SAFETY_ISSUES vulnerable dependencies" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            if [ "$SAFETY_ISSUES" -gt 0 ]; then
              echo "| Package | Vulnerability | Severity |" >> $GITHUB_ENV
              echo "| --- | --- | --- |" >> $GITHUB_ENV
              jq -r '.vulnerabilities[] | "| \(.package_name) \(.affected_versions) | \(.vulnerability_id) | \(.severity) |"' safety-results.json >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          fi
          
          # Process Semgrep results
          if [ -f semgrep-results.json ]; then
            SEMGREP_ISSUES=$(jq '.results | length' semgrep-results.json)
            
            echo "### Semgrep (Code Pattern Analysis)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "Found $SEMGREP_ISSUES code pattern issues" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            if [ "$SEMGREP_ISSUES" -gt 0 ]; then
              echo "| File | Rule | Severity |" >> $GITHUB_ENV
              echo "| --- | --- | --- |" >> $GITHUB_ENV
              jq -r '.results[] | "| \(.path) | \(.check_id) | \(.extra.severity) |"' semgrep-results.json >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          fi
          
          # Add recommendation
          echo "### 💡 Recommendation" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          CRITICAL_COUNT=$(( BANDIT_HIGH + $(jq '.vulnerabilities[] | select(.severity=="critical" or .severity=="high") | .severity' safety-results.json 2>/dev/null | wc -l) ))
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "⚠️ **Critical security issues found. Please address them before merging.**" >> $GITHUB_ENV
          else
            echo "✅ No critical security issues detected. Review any medium/low findings for potential improvements." >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV
      
      - name: Post comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = process.env.COMMENT;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Check if there are critical issues to fail the workflow
            const criticalRegex = /🔴 HIGH \| (\d+)/;
            const match = comment.match(criticalRegex);
            
            if (match && parseInt(match[1]) > 0) {
              core.setFailed("Critical security vulnerabilities detected");
            }