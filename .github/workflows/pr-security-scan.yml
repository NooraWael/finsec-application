name: PR Security Scan

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'finsec-api/finsec_api/**'
      - 'finsec-api/app/**'
      - 'finsec-api/finsec_api/requirements.txt'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper diff analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          
      - name: Check for modified Python files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.py$' | tr '\n' ' ' || echo "")
          echo "Changed Python files: $CHANGED_FILES"
          echo "python_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: Run Bandit on changed files
        if: steps.changed-files.outputs.python_files != ''
        run: |
          bandit -r ${{ steps.changed-files.outputs.python_files }} -f json -o bandit-results.json || echo "Bandit found issues"
      
      - name: Run Bandit on backend code
        run: |
          bandit -r finsec-api/finsec_api -r finsec-api/app -ll -f json -o bandit-full-results.json || echo "Bandit found issues"
      
      - name: Run Safety dependency check
        run: |
          safety check -r finsec-api/finsec_api/requirements.txt --json > safety-results.json || echo "Safety found issues"
        
      - name: Run Semgrep
        run: |
          semgrep --config=p/python --config=p/security-audit finsec-api/finsec_api finsec-api/app --json > semgrep-results.json || echo "Semgrep found issues"
      
      - name: Generate PR comment
        id: generate-comment
        run: |
          echo "Generating security report for PR #${{ github.event.pull_request.number }}"
          
          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "## 🔒 Security Scan Results" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # Process Bandit results
          if [ -f bandit-results.json ] && [ -s bandit-results.json ]; then
            if jq empty bandit-results.json 2>/dev/null; then
              BANDIT_ISSUES=$(jq '.results | length' bandit-results.json || echo "0")
              BANDIT_HIGH=$(jq '.results[] | select(.issue_severity=="HIGH") | .issue_severity' bandit-results.json 2>/dev/null | wc -l || echo "0")
              BANDIT_MED=$(jq '.results[] | select(.issue_severity=="MEDIUM") | .issue_severity' bandit-results.json 2>/dev/null | wc -l || echo "0")
              BANDIT_LOW=$(jq '.results[] | select(.issue_severity=="LOW") | .issue_severity' bandit-results.json 2>/dev/null | wc -l || echo "0")
              
              echo "### Bandit (Changed Files)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "| Severity | Count |" >> $GITHUB_ENV
              echo "| --- | --- |" >> $GITHUB_ENV
              echo "| 🔴 HIGH | $BANDIT_HIGH |" >> $GITHUB_ENV
              echo "| 🟠 MEDIUM | $BANDIT_MED |" >> $GITHUB_ENV
              echo "| 🟡 LOW | $BANDIT_LOW |" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              
              if [ "$BANDIT_HIGH" -gt 0 ]; then
                echo "#### 🔴 High Severity Issues" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
                jq -r '.results[] | select(.issue_severity=="HIGH") | "- **\(.issue_text)** in `\(.filename)` line \(.line_number)"' bandit-results.json >> $GITHUB_ENV 2>/dev/null || echo "Error parsing high severity issues" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
              fi
            else
              echo "### Bandit (Changed Files)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "⚠️ Error parsing Bandit results" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          else
            echo "### Bandit (Changed Files)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "No results found" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
          fi
          
          # Process Safety results
          if [ -f safety-results.json ] && [ -s safety-results.json ]; then
            if jq empty safety-results.json 2>/dev/null; then
              SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-results.json 2>/dev/null || echo "0")
              
              echo "### Safety (Dependency Check)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "Found $SAFETY_ISSUES vulnerable dependencies" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              
              if [ "$SAFETY_ISSUES" -gt 0 ]; then
                echo "| Package | Vulnerability | Severity |" >> $GITHUB_ENV
                echo "| --- | --- | --- |" >> $GITHUB_ENV
                jq -r '.vulnerabilities[] | "| \(.package_name) \(.affected_versions) | \(.vulnerability_id) | \(.severity) |"' safety-results.json >> $GITHUB_ENV 2>/dev/null || echo "| Error parsing vulnerabilities | | |" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
              fi
            else
              echo "### Safety (Dependency Check)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "⚠️ Error parsing Safety results" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          else
            echo "### Safety (Dependency Check)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "No results found" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
          fi
          
          # Process Semgrep results
          if [ -f semgrep-results.json ] && [ -s semgrep-results.json ]; then
            if jq empty semgrep-results.json 2>/dev/null; then
              SEMGREP_ISSUES=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
              
              echo "### Semgrep (Code Pattern Analysis)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "Found $SEMGREP_ISSUES code pattern issues" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              
              if [ "$SEMGREP_ISSUES" -gt 0 ]; then
                echo "| File | Rule | Severity |" >> $GITHUB_ENV
                echo "| --- | --- | --- |" >> $GITHUB_ENV
                jq -r '.results[] | "| \(.path) | \(.check_id) | \(.extra.severity) |"' semgrep-results.json >> $GITHUB_ENV 2>/dev/null || echo "| Error parsing code patterns | | |" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
              fi
            else
              echo "### Semgrep (Code Pattern Analysis)" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
              echo "⚠️ Error parsing Semgrep results" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          else
            echo "### Semgrep (Code Pattern Analysis)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "No results found" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
          fi
          
          # Add recommendation
          echo "### 💡 Recommendation" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # Safely calculate critical issues
          BANDIT_HIGH=${BANDIT_HIGH:-0}
          SAFETY_CRITICAL=$(jq '.vulnerabilities[] | select(.severity=="critical" or .severity=="high") | .severity' safety-results.json 2>/dev/null | wc -l || echo "0")
          CRITICAL_COUNT=$((BANDIT_HIGH + SAFETY_CRITICAL))
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "⚠️ **Critical security issues found. Please address them before merging.**" >> $GITHUB_ENV
          else
            echo "✅ No critical security issues detected. Review any medium/low findings for potential improvements." >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV
      
      - name: Post comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = process.env.COMMENT;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Check if there are critical issues to fail the workflow
            const criticalRegex = /🔴 HIGH \| (\d+)/;
            const match = comment.match(criticalRegex);
            
            if (match && parseInt(match[1]) > 0) {
              core.setFailed("Critical security vulnerabilities detected");
            }
              - name: Generate detailed security report
  run: |
    # Create a directory for reports
    mkdir -p security-reports
    
    # Generate a timestamp for the report
    TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')
    
    # Create a comprehensive report file
    echo "# Security Scan Report - $TIMESTAMP" > security-reports/security-report-$TIMESTAMP.md
    echo "" >> security-reports/security-report-$TIMESTAMP.md
    echo "## Summary" >> security-reports/security-report-$TIMESTAMP.md
    echo "" >> security-reports/security-report-$TIMESTAMP.md
    
    # Add Bandit summary
    if [ -f bandit-full-results.json ] && [ -s bandit-full-results.json ]; then
      echo "### Bandit Results" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      BANDIT_HIGH=$(jq '.results[] | select(.issue_severity=="HIGH") | .issue_severity' bandit-full-results.json 2>/dev/null | wc -l || echo "0")
      BANDIT_MED=$(jq '.results[] | select(.issue_severity=="MEDIUM") | .issue_severity' bandit-full-results.json 2>/dev/null | wc -l || echo "0")
      BANDIT_LOW=$(jq '.results[] | select(.issue_severity=="LOW") | .issue_severity' bandit-full-results.json 2>/dev/null | wc -l || echo "0")
      
      echo "- **HIGH**: $BANDIT_HIGH issues" >> security-reports/security-report-$TIMESTAMP.md
      echo "- **MEDIUM**: $BANDIT_MED issues" >> security-reports/security-report-$TIMESTAMP.md
      echo "- **LOW**: $BANDIT_LOW issues" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      
      # Add detailed findings
      echo "### Detailed Bandit Findings" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      jq -r '.results[] | "#### \(.issue_text)\n- **Severity**: \(.issue_severity)\n- **Confidence**: \(.issue_confidence)\n- **File**: \(.filename)\n- **Line**: \(.line_number)\n- **Code**: ```python\n\(.code)\n```\n"' bandit-full-results.json >> security-reports/security-report-$TIMESTAMP.md 2>/dev/null || echo "Error parsing Bandit results" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
    fi
    
    # Add Semgrep summary
    if [ -f semgrep-results.json ] && [ -s semgrep-results.json ]; then
      echo "### Semgrep Results" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      SEMGREP_ISSUES=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
      
      echo "Found $SEMGREP_ISSUES code pattern issues" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      
      # Add detailed semgrep findings
      echo "### Detailed Semgrep Findings" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
      jq -r '.results[] | "#### \(.check_id)\n- **Severity**: \(.extra.severity)\n- **File**: \(.path)\n- **Line**: \(.start.line)-\(.end.line)\n- **Message**: \(.extra.message)\n- **Code**: ```python\n\(.extra.lines)\n```\n"' semgrep-results.json >> security-reports/security-report-$TIMESTAMP.md 2>/dev/null || echo "Error parsing Semgrep results" >> security-reports/security-report-$TIMESTAMP.md
      echo "" >> security-reports/security-report-$TIMESTAMP.md
    fi
    
    # Add safety results if available
    if [ -f safety-results.json ] && [ -s safety-results.json ]; then
      if jq empty safety-results.json 2>/dev/null; then
        echo "### Safety Scan Results" >> security-reports/security-report-$TIMESTAMP.md
        echo "" >> security-reports/security-report-$TIMESTAMP.md
        SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-results.json 2>/dev/null || echo "0")
        
        echo "Found $SAFETY_ISSUES vulnerable dependencies" >> security-reports/security-report-$TIMESTAMP.md
        echo "" >> security-reports/security-report-$TIMESTAMP.md
        
        # Add detailed vulnerability info
        jq -r '.vulnerabilities[] | "#### \(.package_name) \(.affected_versions)\n- **ID**: \(.vulnerability_id)\n- **Severity**: \(.severity)\n- **Advisory**: \(.advisory)\n"' safety-results.json >> security-reports/security-report-$TIMESTAMP.md 2>/dev/null || echo "Error parsing vulnerabilities" >> security-reports/security-report-$TIMESTAMP.md
      else
        echo "### Safety Scan Results" >> security-reports/security-report-$TIMESTAMP.md
        echo "" >> security-reports/security-report-$TIMESTAMP.md
        echo "Error parsing Safety results" >> security-reports/security-report-$TIMESTAMP.md
        echo "" >> security-reports/security-report-$TIMESTAMP.md
      fi
    fi
    
    # Add raw JSON files as well
    cp bandit-results.json security-reports/bandit-results-$TIMESTAMP.json 2>/dev/null || echo "No bandit results to copy"
    cp bandit-full-results.json security-reports/bandit-full-results-$TIMESTAMP.json 2>/dev/null || echo "No full bandit results to copy"
    cp semgrep-results.json security-reports/semgrep-results-$TIMESTAMP.json 2>/dev/null || echo "No semgrep results to copy"
    cp safety-results.json security-reports/safety-results-$TIMESTAMP.json 2>/dev/null || echo "No safety results to copy"
    
    # Create a ZIP archive
    zip -r security-reports-$TIMESTAMP.zip security-reports/

- name: Upload security report
  uses: actions/upload-artifact@v3
  with:
    name: security-scan-report
    path: security-reports-*.zip
    retention-days: 30